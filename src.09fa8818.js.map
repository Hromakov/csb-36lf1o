{"version":3,"sources":["node_modules/sse.js/lib/sse.js","src/index.js"],"names":["_sse","require","API_KEY","chatWithGPT","inputPrompt","document","getElementById","outputWindow","prompt","value","innerHTML","console","log","data","model","temperature","top_p","max_tokens","stream","n","source","SSE","headers","Authorization","concat","method","payload","JSON","stringify","addEventListener","e","text","parse","choices","style","display","close","readyState","onclick","event","key"],"mappings":"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","file":"src.09fa8818.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (C) 2016 Maxime Petazzoni <maxime.petazzoni@bulix.org>.\n * All rights reserved.\n */\n\nvar SSE = function (url, options) {\n  if (!(this instanceof SSE)) {\n    return new SSE(url, options);\n  }\n\n  this.INITIALIZING = -1;\n  this.CONNECTING = 0;\n  this.OPEN = 1;\n  this.CLOSED = 2;\n\n  this.url = url;\n\n  options = options || {};\n  this.headers = options.headers || {};\n  this.payload = options.payload !== undefined ? options.payload : '';\n  this.method = options.method || (this.payload && 'POST' || 'GET');\n  this.withCredentials = !!options.withCredentials;\n\n  this.FIELD_SEPARATOR = ':';\n  this.listeners = {};\n\n  this.xhr = null;\n  this.readyState = this.INITIALIZING;\n  this.progress = 0;\n  this.chunk = '';\n\n  this.addEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      this.listeners[type] = [];\n    }\n\n    if (this.listeners[type].indexOf(listener) === -1) {\n      this.listeners[type].push(listener);\n    }\n  };\n\n  this.removeEventListener = function(type, listener) {\n    if (this.listeners[type] === undefined) {\n      return;\n    }\n\n    var filtered = [];\n    this.listeners[type].forEach(function(element) {\n      if (element !== listener) {\n        filtered.push(element);\n      }\n    });\n    if (filtered.length === 0) {\n      delete this.listeners[type];\n    } else {\n      this.listeners[type] = filtered;\n    }\n  };\n\n  this.dispatchEvent = function(e) {\n    if (!e) {\n      return true;\n    }\n\n    e.source = this;\n\n    var onHandler = 'on' + e.type;\n    if (this.hasOwnProperty(onHandler)) {\n      this[onHandler].call(this, e);\n      if (e.defaultPrevented) {\n        return false;\n      }\n    }\n\n    if (this.listeners[e.type]) {\n      return this.listeners[e.type].every(function(callback) {\n        callback(e);\n        return !e.defaultPrevented;\n      });\n    }\n\n    return true;\n  };\n\n  this._setReadyState = function(state) {\n    var event = new CustomEvent('readystatechange');\n    event.readyState = state;\n    this.readyState = state;\n    this.dispatchEvent(event);\n  };\n\n  this._onStreamFailure = function(e) {\n    var event = new CustomEvent('error');\n    event.data = e.currentTarget.response;\n    this.dispatchEvent(event);\n    this.close();\n  }\n\n  this._onStreamAbort = function(e) {\n    this.dispatchEvent(new CustomEvent('abort'));\n    this.close();\n  }\n\n  this._onStreamProgress = function(e) {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.status !== 200) {\n      this._onStreamFailure(e);\n      return;\n    }\n\n    if (this.readyState == this.CONNECTING) {\n      this.dispatchEvent(new CustomEvent('open'));\n      this._setReadyState(this.OPEN);\n    }\n\n    var data = this.xhr.responseText.substring(this.progress);\n    this.progress += data.length;\n    data.split(/(\\r\\n|\\r|\\n){2}/g).forEach(function(part) {\n      if (part.trim().length === 0) {\n        this.dispatchEvent(this._parseEventChunk(this.chunk.trim()));\n        this.chunk = '';\n      } else {\n        this.chunk += part;\n      }\n    }.bind(this));\n  };\n\n  this._onStreamLoaded = function(e) {\n    this._onStreamProgress(e);\n\n    // Parse the last chunk.\n    this.dispatchEvent(this._parseEventChunk(this.chunk));\n    this.chunk = '';\n  };\n\n  /**\n   * Parse a received SSE event chunk into a constructed event object.\n   */\n  this._parseEventChunk = function(chunk) {\n    if (!chunk || chunk.length === 0) {\n      return null;\n    }\n\n    var e = {'id': null, 'retry': null, 'data': '', 'event': 'message'};\n    chunk.split(/\\n|\\r\\n|\\r/).forEach(function(line) {\n      line = line.trimRight();\n      var index = line.indexOf(this.FIELD_SEPARATOR);\n      if (index <= 0) {\n        // Line was either empty, or started with a separator and is a comment.\n        // Either way, ignore.\n        return;\n      }\n\n      var field = line.substring(0, index);\n      if (!(field in e)) {\n        return;\n      }\n\n      var value = line.substring(index + 1).trimLeft();\n      if (field === 'data') {\n        e[field] += value;\n      } else {\n        e[field] = value;\n      }\n    }.bind(this));\n\n    var event = new CustomEvent(e.event);\n    event.data = e.data;\n    event.id = e.id;\n    return event;\n  };\n\n  this._checkStreamClosed = function() {\n    if (!this.xhr) {\n      return;\n    }\n\n    if (this.xhr.readyState === XMLHttpRequest.DONE) {\n      this._setReadyState(this.CLOSED);\n    }\n  };\n\n  this.stream = function() {\n    this._setReadyState(this.CONNECTING);\n\n    this.xhr = new XMLHttpRequest();\n    this.xhr.addEventListener('progress', this._onStreamProgress.bind(this));\n    this.xhr.addEventListener('load', this._onStreamLoaded.bind(this));\n    this.xhr.addEventListener('readystatechange', this._checkStreamClosed.bind(this));\n    this.xhr.addEventListener('error', this._onStreamFailure.bind(this));\n    this.xhr.addEventListener('abort', this._onStreamAbort.bind(this));\n    this.xhr.open(this.method, this.url);\n    for (var header in this.headers) {\n      this.xhr.setRequestHeader(header, this.headers[header]);\n    }\n    this.xhr.withCredentials = this.withCredentials;\n    this.xhr.send(this.payload);\n  };\n\n  this.close = function() {\n    if (this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this.xhr.abort();\n    this.xhr = null;\n    this._setReadyState(this.CLOSED);\n  };\n};\n\n// Export our SSE module for npm.js\nif (typeof exports !== 'undefined') {\n  exports.SSE = SSE;\n}\n","import { SSE } from \"sse.js\";\n\nconst API_KEY = \"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\";\n\nconst chatWithGPT = () => {\n  const inputPrompt = document.getElementById(\"prompt\");\n  const outputWindow = document.getElementById(\"output\");\n  const prompt = inputPrompt.value;\n  outputWindow.innerHTML = \"\";\n  console.log(\"got prompt\", prompt);\n  let url = \"https://api.openai.com/v1/completions\";\n  let data = {\n    model: \"text-davinci-003\",\n    prompt,\n    temperature: 0.75,\n    top_p: 0.95,\n    max_tokens: 100,\n    stream: true,\n    n: 1\n  };\n  let source = new SSE(url, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${API_KEY}`\n    },\n    method: \"POST\",\n    payload: JSON.stringify(data)\n  });\n\n  source.addEventListener(\"message\", (e) => {\n    console.log(\"got message\");\n    if (e.data != \"[DONE]\") {\n      let payload = JSON.parse(e.data);\n      let text = payload.choices[0].text;\n      if (text != \"\\n\") {\n        console.log(\"Text: \" + text);\n        outputWindow.innerHTML += text;\n        outputWindow.style.display = \"block\";\n      }\n    } else {\n      // response completely received\n      console.log(\"message done\");\n      source.close();\n    }\n  });\n\n  source.addEventListener(\"readystatechange\", (e) => {\n    if (e.readyState >= 2) {\n      // set your loading to false\n    }\n  });\n\n  source.stream();\n};\n\ndocument.getElementById(\"sendPrompt\").onclick = () => chatWithGPT();\ndocument.getElementById(\"prompt\").addEventListener(\"keypress\", (event) => {\n  if (event.key === \"Enter\") {\n    chatWithGPT();\n  }\n});\n"]}